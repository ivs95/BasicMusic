/*

    boolean esNota = false;
            for(Notas n: Notas.values()){
                while (!esNota) {
                    esNota = compruebaSiEsNota(hz, n, lista, octava);
                }
            }

    private boolean compruebaSiEsNota(float hz, Notas n, ArrayList<NotasImitar> lista, int octava) {
        if (hz >= n.getMinimaFrecuencia() && hz <= n.getMaximaFrecuencia()) {
            if (lista.contains(new NotasImitar(n, octava))) {
                    lista.set(lista.indexOf(new NotasImitar(n, octava)), new NotasImitar(n, octava, lista.indexOf(new NotasImitar(n, octava).contador + 1)));
            } else {
                    lista.add(new NotasImitar(n, octava, 1));
            }
            return true;
        }
        return false;
    } */


    Intervalo maximo 12
    Nota valor (Do 1, Si 12)
    Coges 1ยบ nota --> RE
    Para abajo (negativos) == -(RE - 1) (Valor nota - 1) [intervalos_bajo]
    Para arriba == 12 - RE (Intervalo maximo - valor nota) [intervalos_alto]
    invervalos_posibles = mezcla(int_bajo, int_alto)



   @Override
    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        String opcion = (String)parent.getItemAtPosition(position);
        LinkedHashMap<String,String> datos = GestorBBDD.getInstance().devuelveEstadistica(opcion);
        TableLayout tabla = findViewById(R.id.tablaEstadisticas);
        tabla.removeAllViews();
        for (String nivel : datos.keySet()) {
            String texto = nivel + ": \t\t";
            TableRow row = new TableRow(this);
            row.setLayoutParams(tabla.getLayoutParams());
            TextView prueba = new TextView(this);
            for (String s : datos.get(nivel).split(";")){
                texto += s + "\t\t";
            }
            prueba.setText(texto);
            prueba.setTextSize(15);
            prueba.setTextColor(Color.BLUE);
            row.addView(prueba);
            row.setPadding(0,30,0,0);
            tabla.addView(row);
        }
    }
